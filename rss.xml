<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>fhchl</title><link>https://fhchl.github.io/</link><description>Description comes here</description><atom:link href="https://fhchl.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:franz.heuchel@gmail.com"&gt;Franz Heuchel&lt;/a&gt; </copyright><lastBuildDate>Tue, 23 Oct 2018 19:45:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>A class for representation and modification of LTI system responses</title><link>https://fhchl.github.io/posts/a-class-for-representation-and-modification-of-lti-system-responses/</link><dc:creator>Franz Heuchel</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Doing transfer-function measurements often involves a lot of post-processing: time windowing to cut out reflections, filtering to remove noise and so on, moving from time to frequency domain back and forth, plotting and so on. I have written a small convenient Python module, &lt;a href="https://github.com/fhchl/Response"&gt;response&lt;/a&gt;, that makes these tasks easy by representing LTI system responses as objects of a &lt;code&gt;response.Response&lt;/code&gt; class. Common DSP operations on the responses are implemented as methods that can be easily chained.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://fhchl.github.io/posts/a-class-for-representation-and-modification-of-lti-system-responses/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://fhchl.github.io/posts/a-class-for-representation-and-modification-of-lti-system-responses/</guid><pubDate>Fri, 01 Jun 2018 13:13:12 GMT</pubDate></item><item><title>Usable formula for long term average spectrum of music</title><link>https://fhchl.github.io/posts/2D-plotting-of-non-ufuncs-with-matplotlib/</link><dc:creator>Franz Heuchel</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Knowing the average power spectrum of music can be useful when simulating the sound field and sound pressure levels at music events. In a recently published &lt;a href="http://www.aes.org/e-lib/browse.cfm?elib=18638"&gt;conference paper&lt;/a&gt; this quantity was computed over 12345 (what a number) popular music tracks. However, the piece-wise quadratic formula that fits this spectrum is defined over some arbitrary bins and not the frequency domain. Let's do that here.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://fhchl.github.io/posts/2D-plotting-of-non-ufuncs-with-matplotlib/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://fhchl.github.io/posts/2D-plotting-of-non-ufuncs-with-matplotlib/</guid><pubDate>Wed, 25 Oct 2017 19:52:05 GMT</pubDate></item><item><title>Meshgrid and 2D plotting</title><link>https://fhchl.github.io/posts/meshgrid-and-2d-plotting/</link><dc:creator>Franz Heuchel</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Maybe you have had this experience. You want to make a nice &lt;code&gt;pcolor&lt;/code&gt; or surface plot of a 2D function or dataset over space ($(x, y)$ coordinates). &lt;em&gt;But&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pcolor&lt;/code&gt;, &lt;code&gt;contour&lt;/code&gt; or &lt;code&gt;surface_plot&lt;/code&gt; need inputs in meshgrid form &lt;code&gt;(X, Y, Z)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Your data is in a different form, e.g.&lt;ul&gt;
&lt;li&gt;the function takes coordinates in vector form &lt;code&gt;r = [x, y]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the data is parameterized by two 1D arrays &lt;code&gt;x = [x1, x2, ...]&lt;/code&gt;, &lt;code&gt;y = [y1, y2, ...]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's look at our options.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://fhchl.github.io/posts/meshgrid-and-2d-plotting/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://fhchl.github.io/posts/meshgrid-and-2d-plotting/</guid><pubDate>Wed, 18 Oct 2017 19:52:05 GMT</pubDate></item></channel></rss>